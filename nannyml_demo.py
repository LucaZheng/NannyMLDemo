# -*- coding: utf-8 -*-
"""NannyML Demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1loYm4mBOUgpW8qeJ9FY1saxbeDfMjXqH
"""

!pip install nannyml

# install necessary dependencies
import nannyml as nml
import pandas as pd
from IPython.display import display

"""# Prepare Dataset"""

# load dataset directly from our library
reference_df, analysis_df, _ = nml.load_synthetic_car_price_dataset()

# truncate subset for better monitorization
reference_df['timestamp'] = pd.to_datetime(reference_df['timestamp'], errors='coerce')
reference_df = reference_df[reference_df['timestamp'].dt.strftime('%Y-%m-%d') != '2017-02-16']

# display the reference dataset and the analysis dataset
display(reference_df.tail())
display(analysis_df.head())

# dataset final check
reference_df.info()
analysis_df.info()

"""# Monitoring Estimated Performance Using DLE"""

# select features to monitor
features = [col for col in reference_df.columns if col not in ['id', 'y_true', 'y_pred', 'timestamp']]

# implement dle and start monitoring
dle = nml.DLE(
    metrics=['mae'],
    y_true='y_true',
    y_pred='y_pred',
    feature_column_names=features,
    timestamp_column_name='timestamp',
    chunk_period='D' # perform an estimation daily
)

dle.fit(reference_df) # fit on the reference (test) data
estimated_performance = dle.estimate(analysis_df) # estimate on the prod data

# Plot estimated performance
estimated_performance.plot()

"""# Auto Data Drift Analysis

Multivariate Drift Analysis
"""

# Calculate reconstructed error
drdc = nml.DataReconstructionDriftCalculator(
    column_names=features,
    timestamp_column_name='timestamp',
    chunk_period='D',
)

drdc.fit(reference_df)
multivariate_data_drift = drdc.calculate(analysis_df)

# plot PCA Reconstruction Error
multivariate_data_drift.plot()

"""Univariate Drift Analysis"""

udc = nml.UnivariateDriftCalculator(
    column_names=features,
    timestamp_column_name='timestamp',
    chunk_period='D',
)

udc.fit(reference_df)
univariate_data_drift = udc.calculate(analysis_df)

univariate_data_drift.filter(period='all', metrics='jensen_shannon').plot(kind='distribution')